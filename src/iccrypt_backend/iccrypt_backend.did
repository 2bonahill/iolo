type Result = variant { Ok : Secret; Err : SmartVaultErr };
type Result_1 = variant { Ok : User; Err : SmartVaultErr };
type Result_2 = variant { Ok; Err : SmartVaultErr };
type Result_3 = variant { Ok : UserVault; Err : SmartVaultErr };
type Secret = record {
  id : nat;
  url : opt text;
  username : opt text;
  date_created : nat64;
  password : opt text;
  name : text;
  notes : opt text;
  category : SecretCategory;
  date_modified : nat64;
};
type SecretCategory = variant { Password; Note; Document };
type SecretForCreation = record {
  url : opt text;
  username : opt text;
  password : opt text;
  name : text;
  notes : opt text;
  category : SecretCategory;
};
type SecretForUpdate = record {
  id : nat;
  url : opt text;
  username : opt text;
  password : opt text;
  name : opt text;
  notes : opt text;
  category : opt SecretCategory;
};
type SmartVaultErr = variant {
  UserAlreadyExists : text;
  SecretHasNoId;
  SecretDoesAlreadyExist : text;
  UserDeletionFailed : text;
  SecretDoesNotExist : text;
  UserVaultCreationFailed : text;
  UserDoesNotExist : text;
  UserVaultDoesNotExist : text;
};
type User = record {
  id : principal;
  date_created : nat64;
  date_last_login : opt nat64;
  user_vault_id : nat;
  date_modified : nat64;
};
type UserVault = record {
  id : nat;
  date_created : nat64;
  secrets : vec record { nat; Secret };
  date_modified : nat64;
};
service : {
  add_user_secret : (SecretForCreation) -> (Result);
  create_user : () -> (Result_1);
  delete_user : () -> (Result_2);
  encrypted_ibe_decryption_key_for_caller : (vec nat8) -> (text);
  encrypted_symmetric_key_for_caller : (vec nat8) -> (text);
  get_encrypted_symmetric_key_for : (vec nat8) -> (text, vec nat8);
  get_user_vault : () -> (Result_3) query;
  ibe_encryption_key : () -> (text);
  is_user_vault_existing : () -> (bool) query;
  remove_user_secret : (nat) -> (Result_2);
  symmetric_key_verification_key : () -> (text);
  update_user_secret : (SecretForUpdate) -> (Result);
  what_time_is_it : () -> (nat64) query;
  who_am_i : (text, text) -> (text) query;
};
